// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AccountEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_banned")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryDetailEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("category_detail_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("category_id");

                    b.ToTable("CategoryDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("created_by");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MyBoothEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("booth_avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("booth_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("booth_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("is_active")
                        .HasColumnType("bit");

                    b.Property<bool>("is_banned")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("created_by")
                        .IsUnique();

                    b.ToTable("MyBooth", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.NotifyEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_delete")
                        .HasColumnType("bit");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<bool>("is_read")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("receiver_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("receiver_id");

                    b.ToTable("Notify", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.OrderItemEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("boot_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("seller_id");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("buyer_id");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("product_detail_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("boot_id");

                    b.HasIndex("created_by");

                    b.HasIndex("product_detail_id");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductDetailEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<string>("product_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("product_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("promotional_price")
                        .HasColumnType("float");

                    b.Property<double>("sale_price")
                        .HasColumnType("float");

                    b.Property<int>("sale_quantity")
                        .HasColumnType("int");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stock_quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("product_id");

                    b.ToTable("ProductDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("category_detail_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("booth_id");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("product_desc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("category_detail_id");

                    b.HasIndex("created_by");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ProductReviewEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("product_detail_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("created_by");

                    b.HasIndex("product_detail_id");

                    b.ToTable("ProductReview", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("refresh_token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("created_by")
                        .IsUnique();

                    b.ToTable("RefreshToken", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SaleBillDetailEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("product_detail_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<string>("sale_bill_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("product_detail_id");

                    b.HasIndex("sale_bill_id");

                    b.ToTable("SaleBillDetail", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SaleBillEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address_delivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("boot_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("seller_id");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("buyer_id");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("name_receiver")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pay_method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_delivery")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("status_bill")
                        .HasColumnType("int");

                    b.Property<double>("total_bill")
                        .HasColumnType("float");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("boot_id");

                    b.HasIndex("created_by");

                    b.ToTable("SaleBill", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("birth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("full_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("nick_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("created_by")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VerifyAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("identity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("status_verify")
                        .HasColumnType("int");

                    b.Property<string>("type_account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type_identity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("created_by")
                        .IsUnique();

                    b.ToTable("VerifyAccount", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VoucherEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("apply_for")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("boot_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("created_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("discount")
                        .HasColumnType("float");

                    b.Property<DateTime>("expiry_date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_deleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_updated")
                        .HasColumnType("datetime2");

                    b.Property<int>("quantity_remain")
                        .HasColumnType("int");

                    b.Property<int>("quantity_used")
                        .HasColumnType("int");

                    b.Property<int>("status_voucher")
                        .HasColumnType("int");

                    b.Property<string>("type_discount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("updated_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voucher_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voucher_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voucher_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("boot_id");

                    b.HasIndex("created_by");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.VoucherUseSaleBillEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("bill_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("voucher_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("bill_id");

                    b.HasIndex("voucher_id");

                    b.ToTable("VoucherUseSaleBill", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CategoryDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.CategoryEntity", "Category")
                        .WithMany("ListCategoryDetail")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Entities.CategoryEntity", b =>
                {
                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithMany("ListCategory")
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.MyBoothEntity", b =>
                {
                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithOne("MyBooth")
                        .HasForeignKey("Domain.Entities.MyBoothEntity", "created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.NotifyEntity", b =>
                {
                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithMany("ListNotify")
                        .HasForeignKey("receiver_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.OrderItemEntity", b =>
                {
                    b.HasOne("Domain.Entities.MyBoothEntity", "MyBooth")
                        .WithMany("ListOrderItem")
                        .HasForeignKey("boot_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithMany("ListOrderItem")
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductDetailEntity", "ProductDetail")
                        .WithMany("ListOrderItem")
                        .HasForeignKey("product_detail_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MyBooth");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Domain.Entities.ProductDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.ProductEntity", "Product")
                        .WithMany("ListProductDetail")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.ProductEntity", b =>
                {
                    b.HasOne("Domain.Entities.CategoryDetailEntity", "CategoryDetail")
                        .WithMany("ListProduct")
                        .HasForeignKey("category_detail_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.MyBoothEntity", "MyBooth")
                        .WithMany("ListProduct")
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryDetail");

                    b.Navigation("MyBooth");
                });

            modelBuilder.Entity("Domain.Entities.ProductReviewEntity", b =>
                {
                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithMany("ListProductReview")
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ProductDetailEntity", "ProductDetail")
                        .WithMany("ProductReviews")
                        .HasForeignKey("product_detail_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("Domain.Entities.RefreshTokenEntity", b =>
                {
                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Domain.Entities.RefreshTokenEntity", "created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.SaleBillDetailEntity", b =>
                {
                    b.HasOne("Domain.Entities.ProductDetailEntity", "ProductDetail")
                        .WithMany("SaleBillDetails")
                        .HasForeignKey("product_detail_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SaleBillEntity", "SaleBill")
                        .WithMany("ListSaleBillDetail")
                        .HasForeignKey("sale_bill_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductDetail");

                    b.Navigation("SaleBill");
                });

            modelBuilder.Entity("Domain.Entities.SaleBillEntity", b =>
                {
                    b.HasOne("Domain.Entities.MyBoothEntity", "MyBooth")
                        .WithMany("ListSaleBill")
                        .HasForeignKey("boot_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithMany("ListSaleBill")
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MyBooth");
                });

            modelBuilder.Entity("Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithOne("User")
                        .HasForeignKey("Domain.Entities.UserEntity", "created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.VerifyAccount", b =>
                {
                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithOne("VerifyAccount")
                        .HasForeignKey("Domain.Entities.VerifyAccount", "created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entities.VoucherEntity", b =>
                {
                    b.HasOne("Domain.Entities.MyBoothEntity", "MyBooth")
                        .WithMany("ListVoucher")
                        .HasForeignKey("boot_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AccountEntity", "Account")
                        .WithMany("ListVoucher")
                        .HasForeignKey("created_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("MyBooth");
                });

            modelBuilder.Entity("Domain.Entities.VoucherUseSaleBillEntity", b =>
                {
                    b.HasOne("Domain.Entities.SaleBillEntity", "SaleBill")
                        .WithMany("ListVoucherUseSaleBill")
                        .HasForeignKey("bill_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.VoucherEntity", "Voucher")
                        .WithMany("VoucherUseSaleBills")
                        .HasForeignKey("voucher_id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SaleBill");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Domain.Entities.AccountEntity", b =>
                {
                    b.Navigation("ListCategory");

                    b.Navigation("ListNotify");

                    b.Navigation("ListOrderItem");

                    b.Navigation("ListProductReview");

                    b.Navigation("ListSaleBill");

                    b.Navigation("ListVoucher");

                    b.Navigation("MyBooth")
                        .IsRequired();

                    b.Navigation("RefreshToken")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();

                    b.Navigation("VerifyAccount")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.CategoryDetailEntity", b =>
                {
                    b.Navigation("ListProduct");
                });

            modelBuilder.Entity("Domain.Entities.CategoryEntity", b =>
                {
                    b.Navigation("ListCategoryDetail");
                });

            modelBuilder.Entity("Domain.Entities.MyBoothEntity", b =>
                {
                    b.Navigation("ListOrderItem");

                    b.Navigation("ListProduct");

                    b.Navigation("ListSaleBill");

                    b.Navigation("ListVoucher");
                });

            modelBuilder.Entity("Domain.Entities.ProductDetailEntity", b =>
                {
                    b.Navigation("ListOrderItem");

                    b.Navigation("ProductReviews");

                    b.Navigation("SaleBillDetails");
                });

            modelBuilder.Entity("Domain.Entities.ProductEntity", b =>
                {
                    b.Navigation("ListProductDetail");
                });

            modelBuilder.Entity("Domain.Entities.SaleBillEntity", b =>
                {
                    b.Navigation("ListSaleBillDetail");

                    b.Navigation("ListVoucherUseSaleBill");
                });

            modelBuilder.Entity("Domain.Entities.VoucherEntity", b =>
                {
                    b.Navigation("VoucherUseSaleBills");
                });
#pragma warning restore 612, 618
        }
    }
}
